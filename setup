#!/bin/bash

cd $(dirname $0)
DOTFILES_HOME=`pwd`

# check os
OSTYPE=unknown
UNAME=`uname -a`
[[ $UNAME =~ "Darwin" ]] && OSTYPE=macos
[[ $UNAME =~ "MSYS" ]] && OSTYPE=msys2
[[ $UNAME =~ "MINGW" ]] && OSTYPE=msys2
[[ $UNAME =~ "ubuntu" ]] && OSTYPE=ubuntu

# install packages
install_pkg_anyenv() {
  # install anyenv, anyenv-update
  export PATH="$HOME/.anyenv/bin:$PATH"
  if [ ! -e ~/.anyenv ]; then
    git clone https://github.com/riywo/anyenv ~/.anyenv
    eval "$(anyenv init -)"
    git clone https://github.com/znz/anyenv-update.git $(anyenv root)/plugins/anyenv-update
  fi
  # install pyenv, anaconda(latest)
  if [ ! -e ~/.anyenv/envs/pyenv ]; then
    anyenv install pyenv
  fi
  if [ `pyenv versions | grep anaconda | wc -l` -lt 1 ]; then
    last_anaconda=`pyenv install --list | grep anaconda | sort -r | head -1`
    pyenv install $last_anaconda
  fi
  # install rbenv
  if [ ! -e ~/.anyenv/envs/rbenv ]; then
    anyenv install rbenv
    eval "$(anyenv init -)"
  fi
  # install ndenv
  if [ ! -e ~/.anyenv/envs/ndenv ]; then
    anyenv install ndenv
    eval "$(anyenv init -)"
    git clone https://github.com/pine/ndenv-yarn-install.git "$(ndenv root)/plugins/ndenv-yarn-install"
  fi
  # install goenv
  if [ ! -e ~/.anyenv/envs/goenv ]; then
    anyenv install goenv
  fi
}

# install packages - for macos
brew_cask_install() {
  if [ `brew cask list | grep $1 | wc -l` -lt 1 ]; then
    brew cask install $1
  fi
}
install_macos() {
  # install xcode command line tools
  xcode_path=`xcode-select -p`
  if [ ! -e $xcode_path ]; then
    xcode-select --install
  fi

  # install homebrew
  if [ ! -e /usr/local/bin/brew ]; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  # install anyenv, latest anaconda
  install_pkg_anyenv

  # install utils
  brew install git
  brew install bash-completion

  # install browser, ediror
  brew update
  brew_cask_install google-chrome
  brew_cask_install mi
  brew_cask_install visual-studio-code
  brew_cask_install intellij-idea

  # change screenshot location
  mkdir -p ~/ScreenShot
  defaults write com.apple.screencapture location ~/ScreenShot/
  killall SystemUIServer
}
install_macos_all() {
  # install build tools / java & scala
  brew install gradle
  brew install sbt

  # install ediror & IDE
  # brew cask install sequel-pro

  # install utils
  brew tap homebrew/services
  brew install watchman
  brew install wget
  brew install pwgen
  brew install mariadb
  brew install nkf

  # diff for office
  brew install docx2txt
  if [ ! -e ~/.local/bin/pptx2txt ]; then
    curl -L https://raw.githubusercontent.com/welcheb/pptx2txt.sh/master/pptx2txt.sh > ~/.local/bin/pptx2txt
  fi
  chmod +x ~/.local/bin/pptx2txt
  brew install cpanm
  cpanm Spreadsheet::XLSX
  if [ ! -e ~/.local/bin/git-xlsx-textconv ]; then
    curl -L https://raw.githubusercontent.com/yappo/p5-git-xlsx-textconv.pl/master/git-xlsx-textconv.pl > ~/.local/bin/git-xlsx-textconv
  fi
  chmod +x ~/.local/bin/git-xlsx-textconv

  # install docker
  # brew cask install docker

  # install R
  brew install r
  brew cask install rstudio

  # install packages for Natural Language Processing
  brew install mecab
  brew install mecab-ipadic
  mkdir -p ~/.dotfiles
  if [ ! -d ~/.dotfiles/mecab-ipadic-neologd ]; then
    git clone --depth 1 git@github.com:neologd/mecab-ipadic-neologd.git ~/.dotfiles/mecab-ipadic-neologd
    ~/.dotfiles/mecab-ipadic-neologd/bin/install-mecab-ipadic-neologd -n -y -u -a
  fi

  # install packer
  #brew install packer

  # install gcloud cli
  brew cask install google-cloud-sdk
  gcloud components install app-engine-python app-engine-python-extras

  # install heroku cli
  brew install heroku/brew/heroku

  # adobe cs6 trick
  # sudo mkdir -p /System/Library/Java/JavaVirtualMachines/1.6.0.jdk /System/Library/Java/Support/Deploy.bundle
}

# install packages - for ubuntu
install_ubuntu() {
  install_pkg_anyenv
}

# install packages - for msys2
install_msys2() {
  # install packages
  pacman -S --needed --noconfirm git tmux winpty diffutils
}

# upgrade packages - for macos
upgrade_macos() {
  brew update
  brew upgrade
  # brew cask upgrade
  anyenv update
  gcloud components update --quiet
  # update neologd
  # cd ~/.dotfiles/mecab-ipadic-neologd
  # bin/install-mecab-ipadic-neologd -n -y -u -a
}

# clean cache - for macos
clean_macos() {
  brew cleanup -s
  # brew cask cleanup --outdated
}


# main routine
case $1 in
  install)
    if [ ${OSTYPE} == "macos" ]; then
      install_macos
    elif [ ${OSTYPE} == "ubuntu" ]; then
      install_ubuntu
    elif [ ${OSTYPE} == "msys2" ]; then
      install_msys2
    fi
    ;;
  install-all)
    if [ ${OSTYPE} == "macos" ]; then
      install_macos
      install_macos_all
    elif [ ${OSTYPE} == "ubuntu" ]; then
      install_ubuntu
    elif [ ${OSTYPE} == "msys2" ]; then
      install_msys2
    fi
    ;;
  upgrade)
    if [ ${OSTYPE} == "macos" ]; then
      clean_macos
      upgrade_macos
    fi
    ;;
  clean)
    if [ ${OSTYPE} == "macos" ]; then
      clean_macos
    fi
    ;;
  *)
    echo "usage: dotfiles/setup [install|install-all|upgrade|clean]"
esac

#!/bin/bash

cd $(dirname $0)
DOTFILES_HOME=`pwd`

# check os
OSTYPE=unknown
UNAME=`uname -a`
[[ $UNAME =~ "Darwin" ]] && OSTYPE=macos
[[ $UNAME =~ "MSYS" ]] && OSTYPE=msys2
[[ $UNAME =~ "MINGW" ]] && OSTYPE=msys2
[[ $UNAME =~ "ubuntu" ]] && OSTYPE=ubuntu

# deploy dotfiles
deploy() {
  for f in `ls -a . | grep -e "^\.[^.]?*" | grep -v -e "^\.git$"`; do

    # skip ignore path
    [[ ${f} = ".git" ]] && continue
    [[ ! -f ${f} ]] && continue

    # check os type
    os_ext=""
    fname=$f
    if [[ $f =~ ^(.*)-(.*)$ ]]; then
      fname=${BASH_REMATCH[1]}
      os_ext=${BASH_REMATCH[2]}
    fi
    if [ ${#os_ext} -ne 0 ] && [ ! ${os_ext} == ${OSTYPE} ]; then
      continue
    fi
    if [ ${#os_ext} -eq 0 ] && [ -e $DOTFILES_HOME/$fname-${OSTYPE} ]; then
      continue
    fi

    # create symbolic link
    if [ -e ~/$fname ]; then
      echo "[warn] skip $DOTFILES_HOME/$f -> ~/$fname"
    else
      ln -s $DOTFILES_HOME/$f ~/$fname
      echo "link $DOTFILES_HOME/$f -> ~/$fname"
    fi
  done

  for d in .config .local .ssh; do
    for f in `find $d`; do

      # skip ignore path
      [[ ! -f ${f} ]] && continue

      # check os type
      os_ext=""
      fname=$f
      if [[ $f =~ ^(.*)-(.*)$ ]]; then
        fname=${BASH_REMATCH[1]}
        os_ext=${BASH_REMATCH[2]}
      fi
      if [ ${#os_ext} -ne 0 ] && [ ! ${os_ext} == ${OSTYPE} ]; then
        continue
      fi
      if [ ${#os_ext} -eq 0 ] && [ -e $DOTFILES_HOME/$fname-${OSTYPE} ]; then
        continue
      fi

      # create symbolic link
      if [ -e ~/$fname ]; then
        echo "[warn] skip $DOTFILES_HOME/$f -> ~/$fname"
      else
        ln -s "$DOTFILES_HOME/$f" ~/$fname
        echo "link $DOTFILES_HOME/$f -> ~/$fname"
      fi
    done
  done

}

# install packages
install_pkg_anyenv() {
  # install anyenv, anyenv-update
  export PATH="$HOME/.anyenv/bin:$PATH"
  if [ ! -e ~/.anyenv ]; then
    git clone https://github.com/riywo/anyenv ~/.anyenv
    eval "$(anyenv init -)"
    git clone https://github.com/znz/anyenv-update.git $(anyenv root)/plugins/anyenv-update
  fi
  # install pyenv, pyenv-virtualenv, anaconda(latest)
  if [ ! -e ~/.anyenv/envs/pyenv ]; then
    anyenv install pyenv
    eval "$(anyenv init -)"
    git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv
  fi
  if [ `pyenv versions | grep anaconda | wc -l` -lt 1 ]; then
    last_anaconda=`pyenv install --list | grep anaconda | sort -r | head -1`
    pyenv install $last_anaconda
  fi
  # install rbenv
  if [ ! -e ~/.anyenv/envs/rbenv ]; then
    anyenv install rbenv
    eval "$(anyenv init -)"
  fi
  # install ndenv
  if [ ! -e ~/.anyenv/envs/ndenv ]; then
    anyenv install ndenv
    eval "$(anyenv init -)"
    git clone https://github.com/pine/ndenv-yarn-install.git "$(ndenv root)/plugins/ndenv-yarn-install"
  fi
  # install erlenv & exenv
  if [ ! -e ~/.anyenv/envs/erlenv ]; then
    anyenv install erlenv
  fi
  if [ ! -e ~/.anyenv/envs/exenv ]; then
    anyenv install exenv
  fi

}

# install packages - for macos
install_macos() {
  # install xcode command line tools
  xcode_path=`xcode-select -p`
  if [ ! -e $xcode_path ]; then
    xcode-select --install
  fi

  # install homebrew
  if [ ! -e /usr/local/bin/brew ]; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  # install anyenv
  install_pkg_anyenv
  brew install watchman

  # install hadoop & spark
  brew install wget
  brew install pwgen
  brew install mariadb
  brew install gradle
  brew install sbt
  brew tap homebrew/services

  # install packer
  brew install packer

  # install gcloud client
  if [ ! -d ~/.google-cloud-sdk ]; then
    curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-170.0.1-darwin-x86_64.tar.gz | tar zx -C ~/
    mv ~/google-cloud-sdk ~/.google-cloud-sdk
  fi
  gcloud components install app-engine-python --quiet
  gcloud components install app-engine-python-extras --quiet
  # see. https://stackoverflow.com/questions/27114470/gae-sdk-1-9-5-and-an-invalidcertificateexception
  GAE_SDK_ROOT=$HOME/.google-cloud-sdk/platform/google_appengine
  if [ -f $GAE_SDK_ROOT/lib/fancy_urllib/__init__.py ]; then
    cp $GAE_SDK_ROOT/lib/fancy_urllib/fancy_urllib/__init__.py $GAE_SDK_ROOT/lib/fancy_urllib/__init__.py
  fi

  # install heroku cli
  brew install heroku/brew/heroku
}

# install packages - for ubuntu
install_ubuntu() {
  install_pkg_anyenv
}

# install packages - for msys2
install_msys2() {
  # install packages
  pacman -S --needed --noconfirm git tmux winpty diffutils
}

# main routine
case $1 in
  deploy)
    deploy
    ;;
  install)
    if [ ${OSTYPE} == "macos" ]; then
      install_macos
    elif [ ${OSTYPE} == "ubuntu" ]; then
      install_ubuntu
    elif [ ${OSTYPE} == "msys2" ]; then
      install_msys2
    fi
    ;;
  *)
    echo "usage: dotfiles/setup [deploy|install]"
esac
